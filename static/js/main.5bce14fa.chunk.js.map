{"version":3,"sources":["utils/utils.js","components/TableGroup/components/topSearch.js","components/TableGroup/Context/MyTableContext.js","components/TableGroup/components/topOperations.js","components/TableGroup/index.js","utils/TableUtil.js","App.js","reportWebVitals.js","index.js"],"names":["deepFind_index","deepFind","require","data","dataIndex","key","callBackKey","callBackParent","Array","isArray","findData","find","item","i","length","res","children","isNumber","val","test","baseStyle","master","marginBottom","background","padding","span","marginRight","cursor","color","searchTag","display","borderRadius","border","position","marginLeft","searchCloseIcon","float","top","fontSize","marginTop","right","refreshIcon","TopSearch","props","useState","setSearchTag","useEffect","searchTags","className","style","map","index","value","icon","title","join","CloseOutlined","onClick","arr","cloneDeep","splice","deleteSearchTags","deleteSearchTag","textAlign","dynSolt","MyTableContextDefData","operation","MyTableContext","React","createContext","confirm","Modal","TopOperations","selectedRows","setSelectRows","exportColumns","setExportColumns","options","context","useContext","buttons","indexOf","ExclamationCircleOutlined","content","onOk","ids","id","handleDelete","onCancel","console","log","type","shape","DeleteOutlined","size","xlsxlist","headerMap","xlsxHeader","forEach","push","xlsxBody","Object","keys","findInx","findIndex","itm","parseFloat","buffer","xlsx","build","name","moment","format","blob","Blob","download","document","ExportOutlined","copyAdd","addRow","message","error","CopyOutlined","slot","func","Text","Typography","Option","Select","TextArea","Input","EditableContext","addRowTmp","budget","comment","deliver_status","in_charge","industry","insert_time","is_quote","oppty_name","oppty_progress","oppty_source","oppty_status","path","presale_manager","product","product_2rd","sale_manager","ResizableTitle","onResize","width","restProps","height","handle","e","stopPropagation","draggableOpts","enableUserSelectHack","innerHeight","MyTable","pagination","setPagination","columns","setColumns","dataSource","setDataSource","spinFlg","setSpinFlg","selectedRowKey","setSelectedRowkey","setSelectedRows","searchedColumn","searchText","indeterminate","setIndeterminate","currentEditDataIndex","setCurrentEditDataIndex","checkAllSC","setCheckAllSC","checkListSearchColumn","setCheckListSC","sortColumnInfo","setSortColumnInfo","setSearchTags","addRowType","setAddRowType","defPagination","showTotal","total","params","warn","handleSearch","window","handleSaveCell","row","beforeRow","newData","JSON","stringify","defDataSource","match1","match2","handleResize","nextColumns","rowSelection","selectedRowKeys","onChange","handleCheckData","columnWidth","handleAddRow","_Match","number","string","date","Date","toString","boolean","reduce","pre","cur","typeOf","getAddRowTmp","blockColumn","obj","col","fixed","newSort","fill","defIndex","fixedArr","noFixedArr","success","sortColumn","sortDataSource","indexWords","ik","fv","substr","cnchar","spell","str","inx","sort","filter","itmc","reverse","sortAZ","sortObj","sortType","news","SortDescendingOutlined","SortAscendingOutlined","columnsFindTitle","searchTagsCur","handleSearchTags","fnSetSearchTags","field","columnTitle","list","newTagObj","defSearchTags","flagIndex","debounce","fn","wait","timeout","input","persist","clearTimeout","setTimeout","CheckboxGroupRef","useRef","onCheckSearchColumn","s","trim","current","getColumnSearchProps","isFixed","fixedFlag","headerSearch","searchInput","_row","filterDropdown","setSelectedKeys","selectedKeys","clearFilters","maxHeight","overflowY","UnlockOutlined","LockOutlined","FilterOutlined","placeholder","target","handleKeySearch","margin","suffix","ref","checkList","checked","onCheckAllSearchColumn","clearFilterForField","filterIcon","filtered","DownCircleOutlined","onFilter","record","toLowerCase","includes","onFilterDropdownVisibleChange","visible","render","text","parseInt","searchWords","textToHighlight","placement","columnsRender","ellipsis","showTitle","onHeaderCell","column","colDef","childrenObj","onCell","editable","handleSave","components","header","cell","body","Form","useForm","form","component","Provider","dataType","editing","setEditing","editBeforeRecord","setEditBeforeRecord","toggleEdit","handleEditing","fieldsValue","split","setFieldsValue","inputRef","save","a","validateFields","values","selectType","handleSelected","v","focus","childNode","Item","mode","showSearch","onBlur","opts","onPressEnter","autoSize","paddingRight","onDoubleClick","useImperativeHandle","cRef","spinning","tip","refrenshTable","exportDatas","refreshTable","exportDataAll","headerRigSolt","defSelectRows","operationsSlot","sticky","bordered","rowClassName","handleTableChange","rowKey","scroll","y","summary","pageData","newPageData","kys","filterField","totalArr","newColumns","_children","columnsExportChild","isShow","colu","_obj","_val","isNaN","Summary","Row","Cell","TableUtils","selSetColumns","columnsJSON","columnsDef","selMaping","flag","App","totalNum","pages","setPage","pageSizes","setPageSize","searchValue","setSearchValue","headerSelectMapping","defSearchValue","_","currentDataIndex","showQuickJumper","showSizeChanger","defaultPageSize","defaultCurrent","pageSize","topSearch","page","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5bce14fa.chunk.js","sourcesContent":["import { parse } from 'querystring';\nimport pathRegexp from 'path-to-regexp';\nimport xlsx from 'xlsx';\nimport cnchar from 'cnchar';\n\nconst csv = require('csvtojson');\n\n/* eslint no-useless-escape:0 import/prefer-default-export:0 */\nconst reg = /(((^https?:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/;\n\nexport const isUrl = path => reg.test(path);\n\nexport const getPageQuery = () => parse(window.location.href.split('?')[1]);\n\n/**\n * props.route.routes\n * @param router [{}]\n * @param pathname string\n */\nexport const getAuthorityFromRouter = (router, pathname) => {\n    const authority = router.find(({ path }) => path && pathRegexp(path).exec(pathname));\n    if (authority) return authority;\n    return undefined;\n};\n\nexport const getRouteAuthority = (routeData, path) => {\n    let authorities;\n    routeData.forEach(route => {\n        // exact match\n        if (route.routes) {\n            authorities = getRouteAuthority(route.routes, path) || authorities;\n        } else if (route.path && pathRegexp(route.path).test(path)) {\n            authorities = route;\n        }\n    });\n    return authorities;\n};\n\n/**\n * 获取授权的叶子菜单\n */\nexport const getAuthLeaf = (routeData, authList) => {\n    const routerMap = [];\n    const getLeafMenu = data => {\n        data.forEach(menuItem => {\n            if (!menuItem) {\n                return;\n            }\n            // get only leaf node\n            if (menuItem && menuItem.routes) {\n                getLeafMenu(menuItem.routes);\n            } else if (menuItem.path && !isUrl(menuItem.path) && !menuItem.redirect) {\n                routerMap.push(menuItem);\n            }\n        });\n    };\n    getLeafMenu(routeData);\n    const leafList = routerMap.filter(item => authList.includes(item.path));\n    return leafList;\n};\n\n/**\n * 联动下拉数据获取\n * @param list\n * @param keyName\n * @param valueName\n * @returns {*}\n */\nexport const linkageData = (list, keyName, valueName) => {\n    const res = list.reduce((pre, cur) => {\n        if (cur[keyName] in pre) {\n            if (cur[valueName] !== '' && pre[cur[keyName]].indexOf(cur[valueName]) === -1) {\n                pre[cur[keyName]].push(cur[valueName]);\n            }\n            return pre;\n        }\n\n        pre[cur[keyName]] = [cur[valueName]];\n        return pre;\n    }, {});\n    return res;\n};\n\n/**\n * 根据某个属性，求数组对象里某个属性值的和\n * @param data\n * @param kys\n * @param sumKys\n * @returns {{}}\n */\nexport const arrSumForKey = (data, kys, sumKys) => {\n    const res = {};\n    data.reduce((pre, cur) => {\n        Object.keys(cur).forEach(key => {\n            if (key === kys) {\n                console.log(cur[sumKys]);\n                const iK = cur[kys];\n                if (res[iK]) {\n                    res[iK] += Number(cur[sumKys]);\n                } else {\n                    res[iK] = Number(cur[sumKys]);\n                }\n            }\n        });\n        return cur;\n    }, 0);\n    return res;\n};\n\n/**\n * 数组对象去重：id、name，type都重复的时候，才会被去重\n * @param arr\n * @returns {unknown[]}\n */\n// export const delRepeat = arr => {\n//   return Object.values(\n//     arr.reduce((obj, next) => {\n//       const key = JSON.stringify(next);\n//       return (obj[key] = next), obj;\n//     }, {})\n//   );\n// }\n\n/**\n * 获取冒号隔开的字符串\n * @param str\n * @returns {*}\n */\nexport const getColonStr = str => {\n    let res;\n    if (str.toString().indexOf(':') > 0) {\n        res = str.split(':');\n    }\n    return res;\n};\n\n/**\n * 数组对象根据某个属性值 A-Z 或者Z-A排序 （支持数字）\n * 三方库：npm i convert2pinyin 获取首字母\n * @param data\n * @param key\n * @param type\n * @returns {[]}\n */\nexport const sortAZ = (data, key, type) => {\n    let firstWords = [];\n    const indexWords = [];\n    let res = [];\n    firstWords = data.reduce((pre, cur, index) => {\n        Object.keys(cur).forEach(ik => {\n            if (ik === key) {\n                let fv;\n                if (typeof cur[key] === 'string') {\n                    fv = cur[key].substr(0, 1);\n                    fv = cnchar.spell(fv); // 获取拼音\n                }\n                if (!fv) {\n                    fv = cur[key];\n                }\n                pre.push(fv);\n                indexWords.push({\n                    str: fv,\n                    inx: index,\n                });\n            }\n        });\n        return pre;\n    }, []);\n    firstWords = firstWords.sort();\n    firstWords.reduce((pre, cur) => {\n        if (cur !== pre) {\n            const rs = indexWords.filter(item => item.str === cur);\n            rs.forEach(itmc => {\n                const { inx } = itmc;\n                res.push(data[inx]);\n            });\n        }\n        pre = cur;\n        return pre;\n    }, null);\n    if (type === 'Z-A') {\n        res = res.reverse();\n    }\n    return res;\n};\n\n/**\n * 判断是否为对象\n * @param val\n * @returns {boolean}\n */\nexport const isObj = val => Object.prototype.toString.call(val) === '[object Object]';\n\n/**\n * 深度查找数组或对象里面children指定key值\n * @param data （原数据）\n * @param dataIndex （查找值）\n * @param key （查找键）\n * @param callBackKey （返回键，为空则返回整个查询对象）\n * @param callBackParent  是否返回整个父级对象\n * @returns {undefined|*}\n */\nlet deepFind_index;\nexport const deepFind = (data, dataIndex, key, callBackKey, callBackParent) => {\n    if (Array.isArray(data)) {\n        const findData = data.find(item => item[key] === dataIndex);\n        if (findData) {\n            return deepFind(findData, dataIndex, key, callBackKey);\n        } else {\n            for (let i = 0; i < data.length; i++) {\n                deepFind_index = i;\n                const res = deepFind(data[i], dataIndex, key, callBackKey);\n                if (res) {\n                    if (callBackParent) {\n                        // 返回整个父级对象\n                        return data[deepFind_index];\n                    }\n                    return res;\n                }\n            }\n        }\n    } else {\n        if (data[key] === dataIndex) {\n            return callBackKey ? data[callBackKey] : data;\n        }\n        // 深度查找\n        const { children } = data;\n        if (children) {\n            return children[key] === dataIndex\n                ? callBackKey\n                    ? children[callBackKey]\n                    : children\n                : deepFind(children, dataIndex, key, callBackKey);\n        }\n    }\n};\n\n/**\n * 深度查找对象里是否存在某个属性\n * @param key\n * @param obj\n * @returns {boolean|undefined}\n */\nexport const deepFindKey = (key, data) => {\n    if (isObj(data)) {\n        if (data[key]) {\n            return true;\n        } else {\n            for (const ky in data) {\n                if (isObj(ky)) {\n                    return deepFindKey(key, ky);\n                }\n            }\n        }\n    } else if (Array.isArray(data)) {\n        for (const index of data) {\n            const flag = deepFindKey(key, data[index]);\n            if (flag) {\n                return true;\n            }\n        }\n    }\n};\n\nexport const columnsExportChild = columns => {\n    const res = [];\n    for (const i of columns) {\n        const _children = i.children;\n        if (_children) {\n            res.push(..._children);\n        } else {\n            res.push(i);\n        }\n    }\n    return res;\n};\n\n/**\n * 清除数组空值项\n * @param arr\n */\nexport const clearEmptyStrForArr = arr => {\n    // arr.forEach((i, inx) => {\n    //   if (!i) {\n    //     arr.splice(inx, 1);\n    //   }\n    // });\n    // return arr;\n    const res = arr.filter(s => s && s.trim());\n    return res;\n};\n\n/**\n * 对比两个对象，取不同\n * 返回示例：{aa: (2) [12, 52]}\n * @param obj1\n * @param obj2\n * @returns {{}}\n */\nexport const comparisonObject = (obj1, obj2) => {\n    const res = {};\n    if (JSON.stringify(obj1) === JSON.stringify(obj2)) {\n        return null;\n    } else {\n        Object.keys(obj1).forEach(key => {\n            if (obj1[key] !== obj2[key]) {\n                res[key] = [obj1[key], obj2[key]];\n            }\n        });\n    }\n    return res;\n};\n\nexport const isNumber = val => {\n    const regPos = /^\\d+(\\.\\d+)?$/; //非负浮点数\n    const regNeg = /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数\n    if (regPos.test(val) || regNeg.test(val)) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/**\n * xlsHeaderMaps 导出表头键值对处理\n * @param data\n */\nexport const exportKeyMaps = data => {\n    const res = {};\n    if (data && Array.isArray(data)) {\n        data.forEach(item => {\n            res[item.dataIndex] = item.title;\n        });\n    }\n    return res;\n};\n\n/**\n * 判断一个对象所有的值是否全部为0\n * @param data\n * @returns {boolean}\n * @constructor\n */\nexport const OBJECT_IS_ZERO = data => {\n    let zeros = 0;\n    let len = 0;\n    Object.keys(data).forEach(key => {\n        if (data[key] === 0) {\n            zeros++;\n        }\n        len++;\n    });\n    if (zeros === len) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * 判断空对象\n * @param obj\n * @returns {boolean}\n */\nexport const isEmptyObject = obj => {\n    if (typeof obj === 'object') {\n        return JSON.stringify(obj) === '{}';\n    } else {\n        return true;\n    }\n};\n\n/**\n *\n * @param file\n * @param options  dataType=table 返回antd表格格式的数据\n * @returns {Promise<unknown>}\n */\nexport const readXLSX_to_data = (file, options = {}) => {\n    const { name } = file;\n    const _tIndex = name.lastIndexOf('.');\n    const fileType = name.substr(_tIndex + 1);\n    const { dataType } = options;\n    if (fileType === 'xlsx' || fileType === 'xls') {\n        return new Promise(resolve => {\n            const fileReader = new FileReader();\n            fileReader.readAsArrayBuffer(file);\n            fileReader.onload = event => {\n                try {\n                    const { result } = event.target;\n                    const workbook = xlsx.read(result, { type: 'buffer' });\n                    const data = {};\n                    for (const sheet in workbook.Sheets) {\n                        if (workbook.Sheets.hasOwnProperty(sheet)) {\n                            const sheet2JSONOpts = {\n                                defval: '', //给defval赋值为空的字符串\n                                raw: false, // 不格式化数据 比如时间\n                            };\n                            const tempData = [];\n                            if (workbook.Sheets.hasOwnProperty(sheet)) {\n                                data[sheet] = tempData.concat(\n                                    xlsx.utils.sheet_to_json(workbook.Sheets[sheet], sheet2JSONOpts),\n                                );\n                            }\n                            const SheetList = Object.keys(data);\n                            const [Sheet1] = SheetList;\n                            const excelData = data[Sheet1];\n                            if (dataType === 'table') {\n                                const excelHeader = [];\n                                // 获取表头\n                                for (const headerAttr in excelData[0]) {\n                                    if (excelData[0].hasOwnProperty(headerAttr)) {\n                                        const header = {\n                                            title: headerAttr,\n                                            dataIndex: headerAttr,\n                                            key: headerAttr,\n                                        };\n                                        excelHeader.push(header);\n                                    }\n                                }\n                                resolve({\n                                    tableData: excelData,\n                                    tableHeader: excelHeader,\n                                });\n                            } else {\n                                resolve(excelData);\n                            }\n                        }\n                    }\n                } catch (e) {\n                    console.warn('解析失败', e);\n                }\n            };\n        });\n    } else if (fileType === 'csv') {\n        return new Promise(resolve => {\n            const fileReader = new FileReader();\n            fileReader.readAsText(file, 'gbk');\n            fileReader.onload = event => {\n                const { result } = event.target;\n                csv()\n                    .fromString(result)\n                    .then(obj => {\n                        resolve(obj);\n                    });\n            };\n        });\n    } else {\n        return false;\n    }\n};\n\n/**\n * 递归清除对象(复杂各种嵌套都能搞定，嘎嘎的)\n * @param obj\n */\nexport const clearObj = obj => {\n    const changeParams = {\n        // 返回类型\n        string: '',\n        number: 0,\n        boolean: null,\n        undefined: '',\n    };\n    if (isObj(obj)) {\n        Object.keys(obj).forEach(key => {\n            if (isObj(obj[key]) || Array.isArray(obj[key])) {\n                clearObj(obj[key]);\n            } else {\n                const tp = typeof obj[key];\n                obj[key] = changeParams[tp];\n            }\n        });\n    } else if (Array.isArray(obj)) {\n        obj.reduce((pre, cur, i) => {\n            if (isObj(cur) || Array.isArray(cur)) {\n                clearObj(cur);\n            } else {\n                obj.splice(i, 1);\n            }\n            return pre;\n        }, 0);\n    }\n    return obj;\n};\n\nexport const AntInputDebounce = (fn, wait) => {\n    let timeout = null;\n    return function (input) {\n        input.persist();\n        if (timeout !== null) clearTimeout(timeout);\n        timeout = setTimeout(fn, wait, input);\n    };\n};\n\n/**\n * 数组切割\n * @param array\n * @param subGroupLength\n * @returns {[]}\n * @constructor\n */\nexport const ArrayGroup = (array, subGroupLength) => {\n    let index = 0;\n    const newArray = [];\n    while (index < array.length) {\n        newArray.push(array.slice(index, (index += subGroupLength)));\n    }\n    return newArray;\n};\n\nexport const findKey = (data, value, compare = (a, b) => a === b) =>\n    Object.keys(data).find(k => compare(data[k], value));\n","import React, { useEffect, useState } from 'react';\nimport { Col, Row, Space } from 'antd';\nimport { CloseOutlined, SortAscendingOutlined } from '@ant-design/icons';\nimport { cloneDeep } from 'lodash';\nimport SyncOutlined from '@ant-design/icons/lib/icons/SyncOutlined';\n\nconst baseStyle = {\n  master: {\n    marginBottom: '6px',\n    background: '#fff',\n    padding: '11px',\n  },\n  span: {\n    marginRight: '20px',\n    cursor: 'pointer',\n    color: '#4495f4',\n  },\n  searchTag: {\n    display: 'inline-block',\n    borderRadius: '15px',\n    border: 'solid 1px #bcc3cf',\n    padding: '3px 40px 3px 10px',\n    position: 'relative',\n    marginLeft: '10px',\n    // 'width': '100px'\n  },\n  searchCloseIcon: {\n    cursor: 'pointer',\n    float: 'right',\n    top: '50%',\n    fontSize: '12px',\n    position: 'absolute',\n    marginTop: '-6px',\n    right: '12px',\n    color: '#a0a0a0',\n  },\n  refreshIcon: {\n    color: '#4495f4',\n    fontSize: '14px',\n    cursor: 'pointer',\n  },\n};\nexport default function TopSearch(props) {\n  const [searchTag, setSearchTag] = useState([]);\n  const [uploadRef, setUploadRef] = useState(null);\n\n  useEffect(() => {\n    if (props.searchTags) {\n      setSearchTag([...props.searchTags]);\n    }\n    // setSearchTag([...props.searchTags]);\n  }, [props.searchTags]);\n\n  /**\n   * 添加搜索标签\n   * @param data\n   */\n  const addSearchTag = tagObj => {\n    const arr = cloneDeep(searchTag);\n    arr.push(tagObj);\n    setSearchTag(tagObj);\n  };\n\n  /**\n   * 根据下标来删除导航标签\n   * @param index\n   */\n  const deleteSearchTag = index => {\n    const arr = cloneDeep(searchTag);\n    arr.splice(index, 1);\n    props.deleteSearchTags(index); // 触发父组件 删除某个筛选\n    setSearchTag(arr);\n  };\n\n  const refresh = () => {\n    const { refreshTable } = props;\n    if (refreshTable) refreshTable();\n  };\n\n  const refreshDom = (\n    <div style={baseStyle.refreshIcon} onClick={refresh}>\n      <SyncOutlined /> 刷新\n    </div>\n  );\n\n  return (\n    <div className=\"search-header animate__animated animate__fadeIn\" style={baseStyle.master}>\n      <Row>\n        <Col span={16} style={{display: 'flex'}}>\n          {searchTag.map((item, index) =>\n            item.value.length > 0 ? (\n              <Space key={item.key}>\n                <div\n                  className=\"search-tag animate__animated animate__slideInUp\"\n                  style={baseStyle.searchTag}\n                >\n                  {item.icon ? item.icon : ''}\n                  <span className=\"sea-title\">{item.title}：</span>\n                  <span className=\"sea-info\">\n                    {Array.isArray(item.value) ? item.value.join(',') : item.value}\n                  </span>\n                  <CloseOutlined\n                    style={baseStyle.searchCloseIcon}\n                    onClick={() => {\n                      deleteSearchTag(index);\n                    }}\n                  />\n                </div>\n              </Space>\n            ) : (\n              ''\n            ),\n          )}\n        </Col>\n        <Col span={8} style={{ textAlign: 'right' }}>\n          <Space>\n            {props.dynSolt ? props.dynSolt() : ''}\n            {/*{refreshDom}*/}\n            {/*个人信息*/}\n          </Space>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\n\n/**\n * MyTable头部按钮配置文件，当前只配置了delete按钮显示\n * @type {React.Context<{operation: {buttons: [string]}}>}\n */\n\nexport const MyTableContextDefData = {\n  operation: {\n    // buttons: ['delete66'],\n  },\n};\n\n// 导出 context 对象\nexport const MyTableContext = React.createContext(MyTableContextDefData);\n","import React, { useContext, useEffect, useState } from 'react';\nimport Button from 'antd/es/button';\nimport { Space, Modal, message } from 'antd';\nimport xlsx from 'node-xlsx'; // eslint-disable-line\nimport moment from 'moment';\nimport download from 'downloadjs';\nimport {\n  DeleteOutlined,\n  ExportOutlined,\n  CopyOutlined,\n  ExclamationCircleOutlined,\n} from '@ant-design/icons';\nimport { isNumber } from '@/utils/utils';\nimport { MyTableContext } from '@/components/TableGroup/Context/MyTableContext';\n\nconst { confirm } = Modal;\n\nexport default function TopOperations(props) {\n  const [selectedRows, setSelectRows] = useState([]);\n  const [exportColumns, setExportColumns] = useState([]);\n  let options = [];\n  const context = useContext(MyTableContext);\n\n  // 操作按钮控制  如删除\n  if (context && context.operation) {\n    if (context.operation.buttons) options = [...context.operation.buttons];\n  }\n\n  useEffect(() => {\n    setSelectRows([...props.selectedRows]);\n  }, [props.selectedRows]);\n\n  useEffect(() => {\n    setExportColumns([...props.exportColumns]);\n  }, [props.exportColumns]);\n\n  const handleDelete = () => {\n    // 删除行\n    confirm({\n      title: '删除?',\n      icon: <ExclamationCircleOutlined />,\n      content: '确定执行删除操作',\n      onOk() {\n        const ids = selectedRows.map(item => item.id);\n        props.handleDelete(ids);\n      },\n      onCancel() {\n        console.log('Cancel');\n      },\n    });\n  };\n\n  const exportRows = () => {\n    // 导出数据\n    const xlsxlist = [];\n    const headerMap = [];\n    const xlsxHeader = []; // 导出的文件头\n    exportColumns.forEach(item => {\n      xlsxHeader.push(item.title);\n      headerMap.push({\n        dataIndex: item.dataIndex,\n        title: item.title,\n      });\n    });\n    xlsxlist.push(xlsxHeader);\n    selectedRows.forEach(item => {\n      const xlsxBody = []; // 导出的文件内容\n      Object.keys(item).forEach(key => {\n        const findInx = headerMap.findIndex(itm => itm.dataIndex === key);\n        if (findInx > -1) {\n          if (isNumber(item[key])) {\n            // 避免导出无法进行求和\n            item[key] = parseFloat(item[key]);\n          }\n          xlsxBody[findInx] = item[key];\n        }\n      });\n      xlsxlist.push(xlsxBody);\n    });\n    console.log('xlsxlist', xlsxlist);\n    const buffer = xlsx.build([\n      {\n        name: `${moment().format('YYYY-MM-DD HH:mm:ss')}.xlsx`,\n        data: xlsxlist,\n      },\n    ]);\n    const blob = new Blob([buffer], { type: 'text/plain;charset=utf-8' });\n    download(blob, `${document.title}${moment().format('YYYY-MM-DD HH:mm:ss')}.xlsx`);\n  };\n\n  const copyRowsAdd = () => {\n    // 复制新增\n    if (selectedRows.length === 1) {\n      // message.success('复制新增');\n      props.addRow(1);\n    } else {\n      message.error('你最多只能选择一条数据进行复制！');\n    }\n  };\n  return (\n    <div className=\"top-operations animate__animated animate__fadeIn\">\n      <span className=\"checked-num\">已勾选 {selectedRows.length} 项</span>\n      <div className=\"btn-group\">\n        <Space>\n          {options.indexOf('delete') > -1 && (\n            <Button\n              onClick={handleDelete}\n              type=\"default\"\n              shape=\"round\"\n              icon={<DeleteOutlined />}\n              size={16}\n            >\n              删除\n            </Button>\n          )}\n          <Button\n            onClick={exportRows}\n            type=\"default\"\n            shape=\"round\"\n            icon={<ExportOutlined />}\n            size={16}\n          >\n            导出\n          </Button>\n          {props.copyAdd ? (\n            <Button\n              onClick={copyRowsAdd}\n              type=\"default\"\n              shape=\"round\"\n              icon={<CopyOutlined />}\n              size={16}\n            >\n              复制新增\n            </Button>\n          ) : (\n            ''\n          )}\n          {props.slot\n            ? props.slot.map(item => (\n                <Button key={item.key} onClick={item.func} type=\"default\" shape=\"round\" size={16}>\n                  {item.title}\n                </Button>\n              ))\n            : ''}\n        </Space>\n      </div>\n      {/*<div className=\"\" style={{ float: 'right' }}>*/}\n      {/*  <Avatar />*/}\n      {/*</div>*/}\n    </div>\n  );\n}\n","import React, { useContext, useState, useEffect, useRef, useImperativeHandle } from 'react';\nimport {\n  FilterOutlined,\n  SortDescendingOutlined,\n  SortAscendingOutlined,\n  DownCircleOutlined,\n  LockOutlined,\n  UnlockOutlined,\n} from '@ant-design/icons';\nimport './index.less';\nimport 'react-resizable/css/styles.css';\nimport { Resizable } from 'react-resizable';\nimport Highlighter from 'react-highlight-words';\nimport CheckboxGroup from 'antd/es/checkbox/Group';\nimport { clearEmptyStrForArr, columnsExportChild, deepFind, isNumber, sortAZ } from '@/utils/utils';\n\nimport {\n  Table,\n  Form,\n  Input,\n  Spin,\n  Button,\n  Space,\n  Checkbox,\n  Select,\n  message,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport TopSearch from '@/components/TableGroup/components/topSearch';\nimport TopOperations from '@/components/TableGroup/components/topOperations';\nimport { cloneDeep } from 'lodash';\nimport SearchOutlined from '@ant-design/icons/lib/icons/SearchOutlined';\nimport moment from 'moment';\n\nconst { Text } = Typography;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst EditableContext = React.createContext(null);\n\nlet addRowTmp = {\n  // 添加行的默认数据，可用作于判断新增的数据是否写值\n  id: -1,\n  budget: '',\n  comment: '',\n  deliver_status: '',\n  in_charge: '',\n  industry: '',\n  insert_time: '',\n  is_quote: 0,\n  oppty_name: '',\n  oppty_progress: '',\n  oppty_source: '',\n  oppty_status: '',\n  path: '',\n  presale_manager: '',\n  product: '',\n  product_2rd: '',\n  sale_manager: '',\n};\n\n// 可拖动\nconst ResizableTitle = props => {\n  const { onResize, width, ...restProps } = props;\n\n  if (!width) {\n    return <th {...restProps} />;\n  }\n\n  return (\n    <Resizable\n      width={width}\n      height={0}\n      handle={\n        <span\n          className=\"react-resizable-handle\"\n          onClick={e => {\n            e.stopPropagation();\n          }}\n        />\n      }\n      onResize={onResize}\n      draggableOpts={{ enableUserSelectHack: false }}\n    >\n      <th {...restProps} />\n    </Resizable>\n  );\n};\n\nlet innerHeight = 500;\n\nconst MyTable = props => {\n  const [pagination, setPagination] = useState(null);\n  const [columns, setColumns] = useState([...props.columns]);\n  const [dataSource, setDataSource] = useState([...props.dataSource]);\n  const [spinFlg, setSpinFlg] = useState(false);\n  const [selectedRowKey, setSelectedRowkey] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [searchedColumn, setSearchedColumn] = useState(null);\n  const [searchText, setSearchText] = useState(null);\n  const [indeterminate, setIndeterminate] = useState(true);\n  const [currentEditDataIndex, setCurrentEditDataIndex] = useState(null); // 当前编辑的列\n  const [checkAllSC, setCheckAllSC] = useState(false); // 筛选 => 选择全部\n  const [checkListSearchColumn, setCheckListSC] = useState([]); // 筛选 => 已选择的项\n  const [sortColumnInfo, setSortColumnInfo] = useState({}); // 表格当前sort的列（dataIndex）\n  const [searchTags, setSearchTags] = useState([]); // 搜索的tags\n  const [addRowType, setAddRowType] = useState(0); // 新增行 类型：0 直接新增新数据， 1 复制新增\n\n  useEffect(() => {\n    // 监听props.dataSource的变化，避免dataSource不刷新\n    setDataSource(props.dataSource);\n  }, [props.dataSource]);\n\n  useEffect(() => {\n    // 监听 表格的头部\n    setSpinFlg(true);\n    if (props.columns.length > 0) {\n      setColumns(props.columns);\n      setSpinFlg(false);\n    }\n  }, [props.columns]);\n\n  useEffect(() => {\n    const defPagination = {\n      ...props.pagination,\n      showTotal: total => `共 ${total} 条`,\n    };\n    // 监听翻页参数\n    setPagination(defPagination);\n  }, [props.pagination]);\n\n  // 监听选择搜索\n  useEffect(() => {\n    const params = {}; // 返回父级的搜索参数\n    // 只有排序则不做任何处理\n    if (searchTags.length === 1 && searchTags.find(itm => itm.key === 'sort')) {\n      console.warn('排序，不进行搜索');\n    } else {\n      searchTags.forEach(item => {\n        const { key, value } = item;\n        if (key !== 'sort') {\n          if (value.length > 0) {\n            params[key] = value; // 清除 {xxx: []}搜索长度为0的数据，数组长度为0则不对当前字段进行筛选\n          }\n        }\n      });\n      if (props.handleSearch) {\n        props.handleSearch(params); // 触发父组件更新\n      }\n    }\n  }, [searchTags]);\n\n  useEffect(() => {\n    ({ innerHeight } = window);\n  });\n\n  // 行编辑保存 row: 当前最新行数据，beforeRow：编辑前的数据\n  const handleSaveCell = (row, beforeRow) => {\n    const newData = [...dataSource];\n    const index = newData.findIndex(item => row.id === item.id);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    if (row.id > -1) {\n      // 修改\n      props.handleSaveCell(row, 'update', currentEditDataIndex, beforeRow); // 返回三个参数 row: 当前行数据， update: 当前操作, dataIndex: 当前列\n      setDataSource(newData);\n    } else if (addRowType === 0) {\n      // 新增 新的数据\n      if (JSON.stringify(row) === JSON.stringify(addRowTmp)) {\n        // 新增一条数据完全没做修改\n        message.warn('新增无效，没有数据修改！');\n        const defDataSource = cloneDeep(dataSource);\n        defDataSource.splice(0, 1);\n        setDataSource([...defDataSource]);\n      } else {\n        delete row.id;\n        props.handleSaveCell(row, 'add', currentEditDataIndex, beforeRow);\n      }\n    } else if (addRowType === 1) {\n      // 复制新增\n      const match1 = cloneDeep(row);\n      const match2 = cloneDeep(selectedRows[0]);\n      match2.id = -2;\n      if (JSON.stringify(match1) === JSON.stringify(match2)) {\n        message.warn('新增无效，没有数据修改！');\n        const defDataSource = cloneDeep(dataSource);\n        defDataSource.splice(0, 1);\n        setDataSource([...defDataSource]);\n      } else {\n        delete row.id;\n        props.handleSaveCell(row, 'add', currentEditDataIndex);\n      }\n    }\n  };\n\n  const getAddRowTmp = () => {\n    // 获取添加行的默认数据\n    const _Match = {\n      number: 0,\n      string: '',\n      date: new Date().toString(),\n      boolean: false,\n    };\n    const res = props.columns.reduce((pre, cur) => {\n      const { typeOf } = cur;\n      pre[cur.dataIndex] = typeOf ? _Match[typeOf] : '';\n      return pre;\n    }, {});\n    res.id = -1;\n    return res;\n  };\n\n  const handleResize = index => (e, { size }) => {\n    const nextColumns = [...columns];\n    nextColumns[index] = {\n      ...nextColumns[index],\n      width: size.width,\n    };\n    setColumns(nextColumns);\n  };\n\n  // 可编辑行\n  const EditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n      <Form key={index} form={form} component={false}>\n        <EditableContext.Provider value={form}>\n          <tr {...props} />\n        </EditableContext.Provider>\n      </Form>\n    );\n  };\n\n  // 编辑表格\n  const EditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    type: dataType, // 数据类型\n    ...restProps\n  }) => {\n    const [editing, setEditing] = useState(false);\n    const [editBeforeRecord, setEditBeforeRecord] = useState(null); // 编辑前的数据\n    const form = useContext(EditableContext);\n    const toggleEdit = type => {\n      if (props.handleEditing) {\n        props.handleEditing(dataIndex, record);\n      }\n      if (type === 'multiple') {\n        const fieldsValue = record[dataIndex] ? record[dataIndex].split(',') : [];\n        form.setFieldsValue({\n          [dataIndex]: fieldsValue,\n        });\n      } else {\n        form.setFieldsValue({\n          [dataIndex]: record[dataIndex],\n        });\n      }\n      setEditing(!editing);\n    };\n    const inputRef = useRef(null);\n    const save = async editable => {\n      try {\n        const values = await form.validateFields();\n        let selectType;\n        if (editable[0] === 'select') {\n          const [, , type, func] = editable;\n          selectType = type;\n          if (func) {\n            // 判断select是否传入回调函数\n            const { handleSelected } = func; // 获取回调函数里的选中方法\n            handleSelected(values, record);\n          }\n        }\n        if (selectType === 'multiple') {\n          const v = values[Object.keys(values)[0]];\n          if (v && v !== '') {\n            values[Object.keys(values)[0]] = v.join(',');\n          }\n        }\n        toggleEdit(selectType);\n        handleSaveCell({ ...record, ...values }, editBeforeRecord);\n      } catch (errInfo) {\n        console.log('Save failed:', errInfo);\n      }\n    };\n    useEffect(() => {\n      if (editing) {\n        setEditBeforeRecord({ ...record }); // 保存编辑前的数据\n        try {\n          if (!Array.isArray(editable) && editable[0] !== 'select') {\n            try {\n              if (inputRef.current) {\n                inputRef.current.focus();\n              }\n            } catch (e) {\n              console.warn(e);\n            }\n          }\n          setCurrentEditDataIndex(dataIndex);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }, [editing]);\n\n    let childNode = children;\n\n    if (editable) {\n      childNode = editing ? (\n        <Form.Item\n          style={{\n            margin: 0,\n          }}\n          name={dataIndex}\n          // rules={[\n          //   {\n          //     required: true,\n          //     message: `${title} is required.`,\n          //   },\n          // ]}\n        >\n          {editable[0] === 'select' ? (\n            <Select\n              mode={editable[2] ? editable[2] : ''}\n              ref={inputRef}\n              showSearch\n              onBlur={() => {\n                save(editable);\n              }}\n              onChange={() => {\n                save(editable);\n              }}\n            >\n              {editable[1].map(opts => (\n                <Option value={opts} key={opts}>\n                  {opts}\n                </Option>\n              ))}\n            </Select>\n          ) : dataType === 'number' ? (\n            <Input type=\"number\" onPressEnter={save} onBlur={save} />\n          ) : (\n            <TextArea autoSize ref={inputRef} onPressEnter={save} onBlur={save} />\n          )}\n        </Form.Item>\n      ) : editable[0] !== 'select' ? (\n        <div\n          className=\"editable-cell-value-wrap\"\n          style={{\n            paddingRight: 24,\n          }}\n          onDoubleClick={() => toggleEdit(editable[2])}\n        >\n          {children}\n        </div>\n      ) : (\n        <div\n          className=\"editable-cell-value-wrap\"\n          style={{\n            paddingRight: 24,\n          }}\n          onClick={() => toggleEdit(editable[2])}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    return <td {...restProps}>{childNode}</td>;\n  };\n\n  const onSelectRowKeyChange = (selectedRowKeys, selectedRows) => {\n    setSelectedRows(selectedRows);\n    setSelectedRowkey(selectedRowKeys);\n    const { handleCheckData } = props;\n    if (handleCheckData) props.handleCheckData(selectedRows);\n  };\n\n  const rowSelection = {\n    selectedRowKeys: selectedRowKey,\n    onChange: onSelectRowKeyChange,\n    columnWidth: '63px',\n  };\n\n  const handleAddRow = type => {\n    // type=1 复制新增 其他直接新增一条新数据\n    addRowTmp = getAddRowTmp();\n    if (dataSource.find(item => item.id === -1)) {\n      message.warn('一次最多只能连续新增一条数据！');\n      return;\n    }\n    let newData;\n    if (type === 1) {\n      setAddRowType(1);\n      newData = cloneDeep(selectedRows[0]);\n      newData.id = -2;\n    } else {\n      setAddRowType(0);\n      newData = cloneDeep(addRowTmp);\n    }\n    setDataSource([newData, ...dataSource]);\n  };\n\n  const deleteSearchTags = index => {\n    // 根据下标删除某个筛选项\n    const defSearchTags = cloneDeep(searchTags);\n    defSearchTags.splice(index, 1);\n    // props.handleSearch(defSearchTags); // 触发父组件搜索\n    setSearchTags([...defSearchTags]);\n  };\n\n  const handleDelete = ids => {\n    // 删除行数据\n    if (props.handleDelete) {\n      props.handleDelete(ids);\n      const defSelectRows = [...selectedRows];\n      defSelectRows.length = 0;\n      setSelectedRows([...defSelectRows]);\n    } else {\n      message.error('此表格暂不支持删除操作！');\n    }\n  };\n\n  // 锁定列\n  const blockColumn = (index, type) => {\n    let obj = columns;\n    obj = obj.map(col => {\n      if (col.dataIndex === index) {\n        const news = {\n          ...col,\n          fixed: type === 1 ? 'left' : false, // 1锁定  0解锁\n        };\n        return news;\n      }\n      return { ...col };\n    });\n    const newSort = Array(obj.length).fill(null);\n    obj.reduce((pre, cur) => {\n      const defIndex = props.columns.findIndex(itm => itm.dataIndex === cur.dataIndex);\n      newSort[defIndex] = cur;\n      return cur;\n    }, 0);\n    const fixedArr = [];\n    const noFixedArr = [];\n    newSort.reduce((pre, cur) => {\n      if (cur?.fixed && cur?.fixed === 'left') {\n        fixedArr.push(cur);\n      } else {\n        noFixedArr.push(cur);\n      }\n      return cur;\n    }, 0);\n    obj = [...fixedArr, ...noFixedArr]; // Warning: Index 5 of `columns` missing `fixed='left'` prop.\n    setColumns([...obj]);\n    message.success(type === 1 ? '锁定成功！' : '取消锁定！');\n  };\n\n  // 清除字段所有过滤条件（排序，固定列，以及筛选值）\n  const clearFilterForField = dataIndex => {\n    blockColumn(dataIndex, 0); // 解除锁定\n    // 清除当前筛选值\n    const defSearchTags = cloneDeep(searchTags);\n    const inx = defSearchTags.findIndex(item => item.key === dataIndex);\n    if (inx > -1) {\n      defSearchTags.splice(inx, 1);\n      setSearchTags([...defSearchTags]);\n      setCheckListSC([]);\n    }\n  };\n\n  // 搜索标签选择\n  const handleSearchTags = data => {\n    const dfTmp = { title: '排序', key: 'sort' };\n    const [dataIndex] = Object.keys(data); // dataIndex的值\n    const sortType = data[dataIndex]; // 排序的类型（A-Z ? Z-A）\n    let news = {};\n    news.icon = sortType === 'A-Z' ? <SortDescendingOutlined /> : <SortAscendingOutlined />;\n    const columnsFindTitle = deepFind(columns, dataIndex, 'dataIndex', 'title');\n    news.value = `${columnsFindTitle} ${sortType}`;\n    news = { ...dfTmp, ...news };\n    const searchTagsCur = cloneDeep(searchTags);\n    const inx = searchTagsCur.findIndex(item => item.title === '排序');\n    if (inx !== -1) {\n      searchTagsCur.splice(inx, 1);\n    }\n    searchTagsCur.push(news);\n    setSearchTags(searchTagsCur);\n  };\n\n  // 排序\n  const sortColumn = (type, dataIndex) => {\n    let sortDataSource = [...dataSource];\n    sortDataSource = sortAZ(sortDataSource, dataIndex, type);\n    if (sortDataSource && sortDataSource.length > 0) {\n      setDataSource(sortDataSource);\n      const sortObj = {};\n      sortObj[dataIndex] = type;\n      setSortColumnInfo({ ...sortObj }); // 设置当前已经排序的列\n      handleSearchTags(sortObj); // 将排序的tags传给子组件 触发更新\n    } else {\n      message.warn('当前列的数据全部为空，排序失败！');\n    }\n  };\n\n  const fnSetSearchTags = (field, columnTitle, list) => {\n    const defSearchTags = cloneDeep(searchTags);\n    let newTagObj;\n    const flagIndex = defSearchTags.findIndex(itm => itm.key === field);\n    if (flagIndex > -1) {\n      // 如果筛选项里没有当前数据\n      if (Array.isArray(defSearchTags[flagIndex].value)) {\n        // 如果搜索的value是数组，那么就进行合并去重\n        defSearchTags[flagIndex].value = [...list];\n      }\n    } else {\n      // 如果筛选项里没有当前数据，则插入新的一条筛选项\n      newTagObj = {\n        title: columnTitle,\n        key: field,\n        value: list,\n      };\n      defSearchTags.push(newTagObj);\n    }\n    setSearchTags([...defSearchTags]);\n  };\n  // 设置搜索标签的值\n  // const fnSetSearchTags = (field, columnTitle, list) => {\n  //   const defSearchTags = cloneDeep(searchTags);\n  //   let newTagObj;\n  //   const flagIndex = defSearchTags.findIndex(itm => itm.key === field);\n  //   if (flagIndex > -1) {\n  //     // 如果筛选项里没有当前数据\n  //     if (Array.isArray(defSearchTags[flagIndex].value)) {\n  //       // 如果搜索的value是数组，那么就进行合并去重\n  //       defSearchTags[flagIndex].value = [...list];\n  //     }\n  //   } else {\n  //     // 如果筛选项里没有当前数据，则插入新的一条筛选项\n  //     newTagObj = {\n  //       title: columnTitle,\n  //       key: field,\n  //       value: list,\n  //     };\n  //     defSearchTags.push(newTagObj);\n  //   }\n  //   setSearchTags([...defSearchTags]);\n  //   // setIndeterminate(!!list.length && list.length < checkListOptionsSC.length);\n  //   // setCheckAllSC(list.length === checkListOptionsSC.length);\n  // };\n\n  // 筛选里面的select 选择全部\n  const onCheckAllSearchColumn = (e, checkList, dataIndex) => {\n    setCheckListSC(e.target.checked ? [...checkList] : []);\n    message.success(e.target.checked ? '全选' : '取消全选');\n    setIndeterminate(false);\n    setCheckAllSC(e.target.checked);\n    const columnTitle = columns.find(itm => itm.dataIndex === dataIndex).title; // 取到当前列名\n    fnSetSearchTags(dataIndex, columnTitle, e.target.checked ? checkList : []);\n  };\n\n  // 筛选框里面的搜索输入\n  const handleKeySearch = (e, field) => {\n    const columnTitle = columns.find(itm => itm.dataIndex === field).title; // 取到当前列名\n    fnSetSearchTags(field, columnTitle, [e.target.value]);\n  };\n\n  // 防抖\n  const debounce = (fn, wait) => {\n    let timeout = null;\n    return function (input) {\n      input.persist();\n      if (timeout !== null) clearTimeout(timeout);\n      timeout = setTimeout(fn, wait, input);\n    };\n  };\n\n  const CheckboxGroupRef = useRef(null);\n\n  // 筛选里面的select 选择\n  const onCheckSearchColumn = list => {\n    // columnTitle 当前列名\n    list = clearEmptyStrForArr(list); // 清除数组里面空项\n    setCheckListSC(list);\n    const { field, title: columnTitle } = CheckboxGroupRef.current.props; // 获取ref里面的field属性\n    fnSetSearchTags(field, columnTitle, list);\n  };\n\n  // 表头自定义筛选\n  const getColumnSearchProps = col => {\n    const { dataIndex, type } = col;\n    let isFixed;\n    const fixedFlag = columns.find(item => item.dataIndex === dataIndex);\n    if (fixedFlag) {\n      isFixed = fixedFlag.fixed;\n    }\n    const _row = columns.find(itm => itm.dataIndex === dataIndex);\n    let headerSearch;\n    let searchInput;\n    if (_row) {\n      ({ headerSearch, searchInput = true } = _row);\n    } else {\n      headerSearch = {};\n    }\n    return {\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 6, width: '260px', maxHeight: '500px', overflowY: 'scroll' }}>\n          <div className=\"column-search\">\n            <div className=\"column-search-sort\">\n              <div\n                className=\"h-ic\"\n                onClick={() => {\n                  sortColumn('A-Z', dataIndex);\n                }}\n                style={\n                  sortColumnInfo[dataIndex] && sortColumnInfo[dataIndex] === 'A-Z'\n                    ? { color: '#1890FF' }\n                    : {}\n                }\n              >\n                <SortDescendingOutlined />\n                升序\n              </div>\n              <div\n                className=\"h-ic\"\n                onClick={() => {\n                  sortColumn('Z-A', dataIndex);\n                }}\n                style={\n                  sortColumnInfo[dataIndex] && sortColumnInfo[dataIndex] === 'Z-A'\n                    ? { color: '#1890FF' }\n                    : {}\n                }\n              >\n                <SortAscendingOutlined />\n                降序\n              </div>\n            </div>\n            <div className=\"h-ic lock\">\n              {isFixed ? (\n                <span className=\"cancel-lock\" onClick={() => blockColumn(dataIndex, 0)}>\n                  <Space>\n                    <UnlockOutlined />\n                    取消锁定\n                  </Space>\n                </span>\n              ) : (\n                <span className=\"locking\" onClick={() => blockColumn(dataIndex, 1)}>\n                  <Space>\n                    <LockOutlined />\n                    锁定此列\n                  </Space>\n                </span>\n              )}\n            </div>\n            {searchInput ? (\n              <div className=\"h-ic filter\" style={{ marginBottom: '15px' }}>\n                <FilterOutlined /> 筛选\n                <Input\n                  placeholder=\"字段搜索\"\n                  onChange={debounce(e => {\n                    handleKeySearch(e, dataIndex);\n                  }, 1000)}\n                  style={{ margin: '12px 0' }}\n                  suffix={<SearchOutlined />}\n                />\n                {headerSearch ? (\n                  <div className=\"select-props-list\">\n                    <Checkbox\n                      ref={CheckboxGroupRef}\n                      title={_row.title}\n                      field={dataIndex} // 当前checkbox绑定的字段\n                      indeterminate={indeterminate}\n                      onChange={e => onCheckAllSearchColumn(e, headerSearch, dataIndex)}\n                      checked={checkAllSC}\n                    >\n                      Check all\n                    </Checkbox>\n                    <CheckboxGroup\n                      options={headerSearch}\n                      value={checkListSearchColumn}\n                      onChange={onCheckSearchColumn}\n                    />\n                  </div>\n                ) : (\n                  ''\n                )}\n              </div>\n            ) : (\n              ''\n            )}\n            <div className=\"column-search-button\">\n              <Space>\n                <Button\n                  shape=\"round\"\n                  size={13}\n                  onClick={() => {\n                    clearFilterForField(dataIndex);\n                    confirm();\n                  }}\n                >\n                  取消\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size={13}\n                  onClick={() => {\n                    confirm();\n                  }}\n                >\n                  确定\n                </Button>\n              </Space>\n            </div>\n          </div>\n        </div>\n      ),\n      filterIcon: filtered => <DownCircleOutlined style={{ fontSize: '18px' }} />,\n      onFilter: (value, record) =>\n        record[dataIndex]\n          ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n          : '',\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          // 打开下拉\n        }\n      },\n      render: text => {\n        if (dataIndex.indexOf('time') > -1 || dataIndex.indexOf('date') > -1) {\n          text = moment(text).format('YYYY-MM-DD HH:mm:ss');\n        }\n        // if (isNumber(text)) {\n        //   text = parseInt(text, 10); // 取整\n        // }\n        if (type === 'percent' && text) {\n          // 百分比类型，数据后自动加百分号\n          text = `${text * 100}%`;\n        } else if ((!type || type === 'number') && isNumber(text)) {\n          text = parseInt(text, 10); // 取整\n        }\n        if (searchedColumn === dataIndex) {\n          return (\n            <Highlighter searchWords={searchText} textToHighlight={text ? text.toString() : ''} />\n          );\n        } else {\n          return (\n            <Tooltip placement=\"top\" title={text}>\n              {text}\n            </Tooltip>\n          );\n        }\n      },\n    };\n  };\n\n  // 刷新表格\n  const refreshTable = () => {\n    const { refreshTable } = props;\n    if (refreshTable) refreshTable();\n  };\n\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    setSearchText(selectedKeys[0]);\n    setSearchedColumn(dataIndex);\n  };\n\n  const handleReset = clearFilters => {\n    clearFilters();\n    setSearchText('');\n  };\n\n  // 最终渲染的columns\n  const columnsRender = columns.map((col, index) => {\n    const obj = {\n      ...col,\n      ellipsis: {\n        // 一行显示\n        showTitle: false,\n      },\n      ...getColumnSearchProps(col),\n      onHeaderCell: column => ({\n        width: column.width,\n        onResize: handleResize(index),\n      }),\n    };\n\n    // 递归判断children\n    // let obj1;\n    // const recursiveChild = (curData) => {\n    //   if (curData.children) {\n    //     recursiveChild(curData.children)\n    //   } else {\n    //     if (curData.editable) {\n    //       obj1 = {\n    //         ...curData,\n    //         ...getColumnSearchProps(curData.dataIndex),\n    //         onHeaderCell: column => ({\n    //           width: column.width,\n    //           onResize: handleResize(index),\n    //         }),\n    //       };\n    //       return {\n    //         ...obj,\n    //         onCell: (record, index) => ({\n    //           record,\n    //           editable: col.editable,\n    //           dataIndex: col.dataIndex,\n    //           title: col.title,\n    //           handleSave: () => handleSaveCell(record, index),\n    //         }),\n    //       };\n    //     }\n    //   }\n    // }\n    // recursiveChild(col);\n\n    // 如果包含二级表头支持行内编辑\n    let colDef = cloneDeep(col);\n    if (colDef.children) {\n      colDef = cloneDeep(col);\n      colDef.children.forEach((itm, inx) => {\n        const childrenObj = {\n          ...itm,\n          ...getColumnSearchProps(itm),\n          onHeaderCell: column => ({\n            width: column.width,\n            onResize: handleResize(inx),\n          }),\n        };\n        // if (itm.editable) {\n        //   colDef.children[inx] = {\n        //     ...childrenObj,\n        //     onCell: record => ({\n        //       record,\n        //       editable: itm.editable,\n        //       dataIndex: itm.dataIndex,\n        //       title: itm.title,\n        //       handleSave: () => handleSaveCell(record), // 返回 dataIndex, 给父组件是哪一列更新了\n        //     }),\n        //   };\n        colDef.children[inx] = {\n          ...childrenObj,\n          onCell: record => ({\n            record,\n            editable: itm.editable,\n            dataIndex: itm.dataIndex,\n            title: itm.title,\n            type: itm.type, // 数据类型\n            handleSave: () => handleSaveCell(record), // 返回 dataIndex, 给父组件是哪一列更新了\n          }),\n        };\n      });\n      return colDef;\n    }\n\n    if (col.editable) {\n      return {\n        ...obj,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          type: col.type, // 数据类型\n          handleSave: () => handleSaveCell(record),\n        }),\n      };\n    }\n    return obj;\n  });\n\n  // 表格组件\n  const components = {\n    header: {\n      cell: ResizableTitle,\n    },\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  // 表格求和\n  const tableSummary = pageData => {\n    const newPageData = [];\n    if (pageData.length > 0) {\n      pageData.forEach(itm => {\n        const obj = {};\n        Object.keys(itm).forEach(kys => {\n          const findFlag = deepFind(columns, kys, 'dataIndex');\n          if (findFlag) {\n            obj[kys] = itm[kys];\n          }\n        });\n        newPageData.push(obj);\n      });\n      // 不处理的常用日期字段\n      const filterField = ['insert_time', 'create_time', 'update_time', 'report_date'];\n      const totalArr = new Array(Object.keys(newPageData[0]).length).fill(0);\n      newPageData.forEach(item => {\n        Object.keys(item).forEach((key, index) => {\n          // 处理pageData数据，由于pageData数据为接口传递过来的原始数据，可能和表头展示的数据长度不对应\n          const newColumns = columnsExportChild(columns);\n          const isShow = newColumns.findIndex(colu => colu.dataIndex === key);\n          const _obj = newColumns.find(colu => colu.dataIndex === key);\n          if (isShow > -1 && _obj.type === 'number') {\n            const _val = item[key] ? parseFloat(item[key]) : 0;\n            if (filterField.indexOf(key) < 0) {\n              totalArr[isShow] += _val;\n              if (isNaN(totalArr[isShow])) {\n                totalArr[isShow] = 0;\n              }\n            }\n          } else {\n            totalArr[isShow] = '';\n          }\n        });\n      });\n      return (\n        <>\n          <Table.Summary.Row>\n            <Table.Summary.Cell>\n              <Text type=\"danger\">总计：</Text>\n            </Table.Summary.Cell>\n            {totalArr.map((arr, index) => (\n              <Table.Summary.Cell key={`${arr}${index}`}>\n                <Text type=\"danger\">\n                  <strong>{~~arr}</strong>\n                </Text>\n              </Table.Summary.Cell>\n            ))}\n          </Table.Summary.Row>\n        </>\n      );\n    }\n  };\n\n  useImperativeHandle(props.cRef, () => ({\n    // 将组件的方法通过ref方式暴露出去\n    addRow() {\n      handleAddRow();\n    },\n  }));\n\n  return (\n    <div>\n      <Spin spinning={spinFlg} tip=\"加载中~\">\n        <div style={{ display: selectedRows.length === 0 ? '' : 'none' }}>\n          <TopSearch\n            searchTags={searchTags}\n            refrenshTable={props.refrenshTable}\n            exportDatas={selectedRows}\n            addRow={handleAddRow}\n            deleteSearchTags={deleteSearchTags}\n            refreshTable={refreshTable}\n            exportDataAll={() => {\n              props.exportDataAll();\n            }}\n            dynSolt={props.headerRigSolt}\n          />\n        </div>\n        <div style={{ display: selectedRows.length > 0 ? '' : 'none' }}>\n          <TopOperations\n            handleDelete={handleDelete}\n            selectedRows={selectedRows}\n            exportColumns={columns}\n            addRow={handleAddRow}\n            copyAdd={props.options ? props.options.copyAdd : false}\n            slot={props.operationsSlot} // 操作栏插槽 类型Array\n          />\n        </div>\n        <Table\n          sticky\n          bordered\n          components={components}\n          columns={columnsRender}\n          dataSource={dataSource}\n          rowClassName={() => 'editable-row'}\n          onChange={props.handleTableChange}\n          rowKey=\"id\"\n          pagination={pagination}\n          size=\"small\"\n          scroll={{ y: innerHeight - 200 }}\n          rowSelection={{ ...rowSelection }}\n          summary={tableSummary}\n        />\n      </Spin>\n    </div>\n  );\n};\n\nexport default MyTable;\n","const TableUtils = {\n  selSetColumns: (dataIndex, columnsJSON) => {\n    console.log('执行sel')\n    // 设置列\n    let columnsDef = columnsJSON;\n    if (Array.isArray(dataIndex)) {\n      // 一次性设置多少columns\n      const selMaping = [...dataIndex];\n      columnsDef = columnsDef.map(col => {\n        const flag = selMaping.find(itm => itm.dataIndex === col.dataIndex);\n        if (flag) {\n          const { value } = flag;\n          // 默认要编辑必须在columns配置\"editable\": true\n          if (col.editable) col.editable = ['select', value];\n          col.headerSearch = value;\n        }\n        return col;\n      });\n    }\n    return columnsDef;\n  },\n};\n\nexport default TableUtils;\n","import React, { useState, useEffect } from 'react';\nimport MyTable from \"./components/TableGroup\";\nimport _ from 'lodash'\nimport {message} from \"antd\";\nimport {MyTableContext} from \"./components/TableGroup/Context/MyTableContext\";\nimport TableUtils from \"./utils/TableUtil\";\n\nconst columnsJSON = require('./mock/columns.json');\nconst dataSource = require('./mock/data.json');\nfunction App() {\n    const [totalNum, setTotalNum] = useState(0);\n    const [pages, setPage] = useState(1);\n    const [columns, setColumns] = useState([]);\n    const [pageSizes, setPageSize] = useState(20);\n    const [searchValue, setSearchValue] = useState({});\n\n    const headerSelectMapping = [\n            {\n                // 产品\n                dataIndex: 'product',\n                value: ['Giant', 'ZGL', 'Liv'],\n            }\n        ]\n\n    /**\n     * 表头下拉筛选\n     */\n    const initHeaderSelect = () => {\n        setColumns(TableUtils.selSetColumns(headerSelectMapping, _.cloneDeep(columnsJSON)));\n    }\n\n    /**\n     * 初始化表格数据\n     */\n    const initBaseData = () => {\n        // do somethings\n    }\n\n    /**\n     * 搜索\n     * @param params\n     * @returns {Promise<void>}\n     */\n    const handleSearch = async params => {\n        let defSearchValue = _.cloneDeep(searchValue);\n        if (JSON.stringify(params) === '{}') {\n            defSearchValue = {};\n        } else {\n            Object.keys(params).forEach(key => {\n                if (params[key].indexOf(',') > -1) {\n                    params[key] = params[key].split(',');\n                }\n                defSearchValue[key] = params[key];\n            });\n        }\n        setSearchValue({ ...defSearchValue });\n    }\n\n    /**\n     *\n     * @param row 行数据\n     * @param type 操作类型 update：更新 add: 新增\n     * @param currentDataIndex 当前dataIndex\n     * @param editBeforeRecord 编辑前的数据\n     * @returns {Promise<void>}\n     */\n    const handleSaveCell = async (row, type, currentDataIndex, editBeforeRecord) => {\n        if (type === 'update') {\n            // do somethings\n            message.success(\"更新数据！\");\n        }  else if (type === 'add') {\n            // do somethings\n            message.success(\"新增数据！\");\n        }\n    }\n\n    /**\n     * 删除行\n     * @param id\n     * @returns {Promise<void>}\n     */\n    const handleDelete = async id => {\n        // api do somethings\n        message.success('删除行数据！');\n    }\n\n    /**\n     * 翻页\n     * @param pagination\n     */\n    const handleTableChange = (pagination) => {\n        setPage(pagination.current);\n        setPageSize(pagination.pageSize);\n        setSearchValue({\n            ...searchValue,\n            page: pagination.current,\n            pageSize: pagination.pageSize,\n        });\n    }\n\n    useEffect(() => {\n       initHeaderSelect();\n    }, []);\n\n  return (\n    <div className=\"App\">\n        <MyTableContext.Provider\n            value={{\n                operation: {\n                    buttons: ['delete'],\n                },\n            }}>\n            <MyTable\n                columns={columns}\n                dataSource={dataSource}\n                pagination={{\n                    total: totalNum,\n                    showQuickJumper: true,\n                    showSizeChanger: true,\n                    defaultPageSize: 10,\n                    defaultCurrent: 1,\n                    current: pages,\n                    pageSize: pageSizes,\n                }}\n                options={{\n                    topSearch: true, // 顶部导航\n                    copyAdd: true, // 复制新增\n                }}\n                refreshTable={initBaseData} // 刷新表格数据\n                handleTableChange={handleTableChange} // 翻页\n                handleSearch={handleSearch} // 搜索\n                handleSaveCell={handleSaveCell} // 保存行数据 返回三个参数 row: 当前行数据， update: 当前操作, dataIndex: 当前列\n                handleDelete={handleDelete} // 删除行\n            />\n        </MyTableContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/antd.min.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}